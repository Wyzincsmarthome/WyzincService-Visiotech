const fs = require('fs');
const path = require('path');
const { transformProduct } = require('./csv_transformer');

// Configura√ß√µes para ficheiros grandes
const CONFIG = {
    BATCH_SIZE: 50,           // Processar 50 produtos de cada vez
    MAX_PRODUCTS: 500,        // Limite m√°ximo para evitar timeout
    MEMORY_LIMIT: 100 * 1024 * 1024, // 100MB limite de mem√≥ria
    PROGRESS_INTERVAL: 10     // Mostrar progresso a cada 10 produtos
};

// Fun√ß√£o para ler CSV com gest√£o de mem√≥ria
function parseCSVSafe(csvContent, delimiter = ';') {
    try {
        console.log('üìä Analisando tamanho do ficheiro CSV...');
        console.log(`üìè Tamanho: ${(csvContent.length / 1024 / 1024).toFixed(2)} MB`);
        
        const lines = csvContent.split('\n').filter(line => line.trim());
        if (lines.length === 0) {
            console.log('‚ùå CSV vazio');
            return [];
        }
        
        console.log(`üìÑ ${lines.length} linhas encontradas no CSV`);
        
        // Verificar se excede limite
        if (lines.length > CONFIG.MAX_PRODUCTS + 1) { // +1 para header
            console.log(`‚ö†Ô∏è Ficheiro muito grande! Limitando a ${CONFIG.MAX_PRODUCTS} produtos para evitar timeout`);
            lines.splice(CONFIG.MAX_PRODUCTS + 1); // Manter header + MAX_PRODUCTS
        }
        
        const headers = lines[0].split(delimiter);
        const products = [];
        
        console.log('üìã Headers encontrados:', headers.slice(0, 5).join(', ') + '...');
        
        for (let i = 1; i < lines.length; i++) {
            try {
                const values = lines[i].split(delimiter);
                const product = {};
                
                headers.forEach((header, index) => {
                    product[header.trim()] = values[index] ? values[index].trim() : '';
                });
                
                products.push(product);
                
                // Mostrar progresso
                if (i % CONFIG.PROGRESS_INTERVAL === 0) {
                    console.log(`üìä Parsing: ${i}/${lines.length - 1} produtos...`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è Erro na linha ${i}: ${error.message}`);
            }
        }
        
        console.log(`‚úÖ ${products.length} produtos parseados com sucesso`);
        return products;
        
    } catch (error) {
        console.error('‚ùå Erro no parsing CSV:', error.message);
        throw error;
    }
}

// Fun√ß√£o para processar em lotes
function processBatch(products, startIndex, batchSize) {
    const endIndex = Math.min(startIndex + batchSize, products.length);
    const batch = products.slice(startIndex, endIndex);
    const shopifyProducts = [];
    
    console.log(`üîÑ Processando lote ${Math.floor(startIndex / batchSize) + 1}: produtos ${startIndex + 1}-${endIndex}`);
    
    let processedInBatch = 0;
    let skippedInBatch = 0;
    
    batch.forEach((visiProduct, index) => {
        try {
            const transformedProducts = transformProduct(visiProduct);
            
            if (transformedProducts && Array.isArray(transformedProducts)) {
                shopifyProducts.push(...transformedProducts);
                processedInBatch++;
            } else if (transformedProducts) {
                shopifyProducts.push(transformedProducts);
                processedInBatch++;
            } else {
                skippedInBatch++;
            }
            
            // Log detalhado apenas para primeiros produtos
            if (startIndex + index < 20) {
                const status = transformedProducts ? '‚úÖ Processado' : '‚è≠Ô∏è Ignorado';
                console.log(`   ${startIndex + index + 1}: ${visiProduct.name} (${visiProduct.brand}) ‚Üí ${status}`);
            }
            
        } catch (error) {
            skippedInBatch++;
            if (startIndex + index < 20) {
                console.log(`   ${startIndex + index + 1}: ${visiProduct.name} ‚Üí ‚ùå Erro: ${error.message}`);
            }
        }
    });
    
    console.log(`‚úÖ Lote conclu√≠do: ${processedInBatch} processados, ${skippedInBatch} ignorados`);
    
    return {
        products: shopifyProducts,
        processed: processedInBatch,
        skipped: skippedInBatch
    };
}

// Fun√ß√£o para gerar CSV Shopify com valida√ß√£o robusta
function generateShopifyCSVOptimized(products) {
    console.log('üìù Gerando CSV Shopify...');
    
    const headers = [
        'Handle', 'Title', 'Body (HTML)', 'Vendor', 'Product Category', 'Type', 'Tags',
        'Published', 'Option1 Name', 'Option1 Value', 'Option2 Name', 'Option2 Value',
        'Option3 Name', 'Option3 Value', 'Variant SKU', 'Variant Grams',
        'Variant Inventory Tracker', 'Variant Inventory Qty', 'Variant Inventory Policy',
        'Variant Fulfillment Service', 'Variant Price', 'Variant Compare At Price',
        'Variant Requires Shipping', 'Variant Taxable', 'Variant Barcode',
        'Image Src', 'Image Position', 'Image Alt Text', 'Gift Card',
        'SEO Title', 'SEO Description', 'Google Shopping / Google Product Category',
        'Google Shopping / Gender', 'Google Shopping / Age Group', 'Google Shopping / MPN',
        'Google Shopping / Condition', 'Google Shopping / Custom Product',
        'Variant Image', 'Variant Weight Unit', 'Variant Tax Code', 'Cost per item',
        'Included / United States', 'Price / United States', 'Compare At Price / United States',
        'Included / International', 'Price / International', 'Compare At Price / International',
        'Status'
    ];
    
    let csv = headers.join(',') + '\n';
    
    products.forEach((product, index) => {
        try {
            const row = headers.map(header => {
                let value = product[header];
                
                // CORRE√á√ÉO: Valida√ß√£o robusta do valor
                if (value === null || value === undefined) {
                    return '';
                }
                
                // Converter para string se n√£o for
                if (typeof value !== 'string') {
                    value = String(value);
                }
                
                // Escapar aspas e v√≠rgulas
                if (value.includes(',') || value.includes('"') || value.includes('\n')) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value;
            });
            csv += row.join(',') + '\n';
            
            // Mostrar progresso para CSVs grandes
            if ((index + 1) % 100 === 0) {
                console.log(`üìù CSV: ${index + 1}/${products.length} linhas geradas...`);
            }
        } catch (error) {
            console.error(`‚ùå Erro na linha ${index + 1}:`, error.message);
            console.error('Produto problem√°tico:', JSON.stringify(product, null, 2));
            // Continuar com linha vazia em caso de erro
            csv += headers.map(() => '').join(',') + '\n';
        }
    });
    
    console.log(`‚úÖ CSV gerado: ${products.length} linhas`);
    return csv;
}

// Fun√ß√£o principal otimizada
async function processVisiCSV(inputPath, outputPath) {
    try {
        console.log('üöÄ Iniciando processamento CSV Visiotech (Otimizado)...');
        console.log(`‚öôÔ∏è Configura√ß√µes: Lotes de ${CONFIG.BATCH_SIZE}, M√°ximo ${CONFIG.MAX_PRODUCTS} produtos`);
        
        // Verificar se ficheiro existe
        if (!fs.existsSync(inputPath)) {
            throw new Error(`Ficheiro n√£o encontrado: ${inputPath}`);
        }
        
        // Verificar tamanho do ficheiro
        const stats = fs.statSync(inputPath);
        console.log(`üìè Tamanho do ficheiro: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
        
        if (stats.size > CONFIG.MEMORY_LIMIT) {
            console.log(`‚ö†Ô∏è Ficheiro muito grande! Pode causar problemas de mem√≥ria.`);
        }
        
        // Ler ficheiro CSV
        console.log('üìÅ Carregando ficheiro CSV...');
        const csvContent = fs.readFileSync(inputPath, 'utf-8');
        console.log('‚úÖ Ficheiro CSV carregado');
        
        // Parsear CSV com seguran√ßa
        const visiProducts = parseCSVSafe(csvContent, ';');
        
        if (visiProducts.length === 0) {
            throw new Error('Nenhum produto encontrado no CSV');
        }
        
        // Processar em lotes
        const allShopifyProducts = [];
        let totalProcessed = 0;
        let totalSkipped = 0;
        
        console.log(`\nüîÑ Iniciando processamento em lotes de ${CONFIG.BATCH_SIZE}...`);
        
        for (let i = 0; i < visiProducts.length; i += CONFIG.BATCH_SIZE) {
            const batchResult = processBatch(visiProducts, i, CONFIG.BATCH_SIZE);
            
            allShopifyProducts.push(...batchResult.products);
            totalProcessed += batchResult.processed;
            totalSkipped += batchResult.skipped;
            
            // For√ßar garbage collection se dispon√≠vel
            if (global.gc) {
                global.gc();
            }
            
            // Pausa pequena entre lotes para evitar sobrecarga
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.log('\nüìù Gerando ficheiro CSV final...');
        
        // Gerar CSV Shopify
        const shopifyCSV = generateShopifyCSVOptimized(allShopifyProducts);
        
        // Guardar ficheiro
        fs.writeFileSync(outputPath, shopifyCSV, 'utf-8');
        
        console.log('\nüéâ Processamento conclu√≠do!');
        console.log(`üìä Estat√≠sticas finais:`);
        console.log(`   ‚Ä¢ Produtos no CSV original: ${visiProducts.length}`);
        console.log(`   ‚Ä¢ Produtos processados: ${totalProcessed}`);
        console.log(`   ‚Ä¢ Produtos ignorados: ${totalSkipped}`);
        console.log(`   ‚Ä¢ Total linhas Shopify: ${allShopifyProducts.length}`);
        console.log(`   ‚Ä¢ Taxa de aprova√ß√£o: ${((totalProcessed / visiProducts.length) * 100).toFixed(1)}%`);
        console.log(`üìÅ Ficheiro gerado: ${outputPath}`);
        console.log(`üìè Tamanho final: ${(fs.statSync(outputPath).size / 1024 / 1024).toFixed(2)} MB`);
        
        return {
            processed: totalProcessed,
            skipped: totalSkipped,
            totalLines: allShopifyProducts.length,
            outputFile: outputPath,
            originalProducts: visiProducts.length
        };
        
    } catch (error) {
        console.error('‚ùå Erro no processamento:', error.message);
        console.error('Stack trace:', error.stack);
        throw error;
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const inputFile = process.argv[2] || 'csv-input/visiotech_connect.csv';
    const outputFile = process.argv[3] || `csv-output/shopify_products_${new Date().toISOString().slice(0,10).replace(/-/g,'')}_${new Date().toTimeString().slice(0,8).replace(/:/g,'')}.csv`;
    
    console.log(`üìã Argumentos recebidos:`);
    console.log(`   ‚Ä¢ Input: ${inputFile}`);
    console.log(`   ‚Ä¢ Output: ${outputFile}`);
    
    processVisiCSV(inputFile, outputFile)
        .then(result => {
            console.log('\n‚úÖ Processamento conclu√≠do com sucesso!');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå Erro no processamento:', error.message);
            process.exit(1);
        });
}

module.exports = { processVisiCSV, CONFIG };

