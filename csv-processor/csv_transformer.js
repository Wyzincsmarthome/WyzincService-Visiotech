const fs = require('fs');
const path = require('path');
const csv = require('csv-parser'); // Usaremos esta biblioteca para ler o CSV

// ##################################################################
// TODAS AS SUAS FUNÇÕES ORIGINAIS ESTÃO AQUI, INTACTAS E PRESERVADAS
// ##################################################################
function translateText(text) { if (!text || typeof text !== 'string') return ''; const translations = { 'Sirena': 'Sirene', 'Exterior': 'Exterior', 'Interior': 'Interior', 'Detector': 'Detetor', 'Sensor': 'Sensor', 'Alarma': 'Alarme', 'Sistema': 'Sistema', 'Inalámbrico': 'Sem fios', 'Batería': 'Bateria', 'Alimentación': 'Alimentação', 'Instalación': 'Instalação', 'Configuración': 'Configuração', 'Aplicación': 'Aplicação', 'Conexión': 'Ligação', 'Comunicación': 'Comunicação', 'Tecnología': 'Tecnologia', 'Seguridad': 'Segurança', 'Protección': 'Proteção', 'Vigilancia': 'Vigilância', 'Control': 'Controlo', 'Monitoreo': 'Monitorização', 'Notificación': 'Notificação', 'Activación': 'Ativação', 'Desactivación': 'Desativação', 'Funcionamiento': 'Funcionamento', 'Características': 'Características', 'Especificaciones': 'Especificações', 'Dimensiones': 'Dimensões', 'Temperatura': 'Temperatura', 'Humedad': 'Humidade', 'Resistencia': 'Resistência', 'Certificación': 'Certificação', 'Garantía': 'Garantia', 'Mantenimiento': 'Manutenção', 'Reparación': 'Reparação', 'Sustitución': 'Substituição', 'Actualización': 'Atualização', 'Versión': 'Versão', 'Modelo': 'Modelo', 'Referencia': 'Referência', 'Código': 'Código', 'Número': 'Número', 'Serie': 'Série', 'Fabricante': 'Fabricante', 'Distribuidor': 'Distribuidor', 'Proveedor': 'Fornecedor', 'Cliente': 'Cliente', 'Usuario': 'Utilizador', 'Administrador': 'Administrador', 'Técnico': 'Técnico', 'Profesional': 'Profissional', 'Doméstico': 'Doméstico', 'Comercial': 'Comercial', 'Industrial': 'Industrial', 'Residencial': 'Residencial', 'Oficina': 'Escritório', 'Hogar': 'Casa', 'Edificio': 'Edifício', 'Vivienda': 'Habitação', 'Local': 'Local', 'Zona': 'Zona', 'Área': 'Área', 'Espacio': 'Espaço', 'Lugar': 'Lugar', 'Sitio': 'Sítio', 'Ubicación': 'Localização', 'Posición': 'Posição', 'Colocación': 'Colocação', 'Montaje': 'Montagem', 'Fijación': 'Fixação', 'Sujeción': 'Sujeição', 'Soporte': 'Suporte', 'Base': 'Base', 'Estructura': 'Estrutura', 'Marco': 'Moldura', 'Carcasa': 'Caixa', 'Cubierta': 'Cobertura', 'Tapa': 'Tampa', 'Panel': 'Painel', 'Pantalla': 'Ecrã', 'Display': 'Display', 'Indicador': 'Indicador', 'LED': 'LED', 'Luz': 'Luz', 'Iluminación': 'Iluminação', 'Señal': 'Sinal', 'Aviso': 'Aviso', 'Alerta': 'Alerta', 'Emergencia': 'Emergência', 'Peligro': 'Perigo', 'Riesgo': 'Risco', 'Amenaza': 'Ameaça', 'Intrusión': 'Intrusão', 'Robo': 'Roubo', 'Hurto': 'Furto', 'Sabotaje': 'Sabotagem', 'Vandalismo': 'Vandalismo', 'Daño': 'Dano', 'Deterioro': 'Deterioração', 'Fallo': 'Falha', 'Error': 'Erro', 'Problema': 'Problema', 'Solución': 'Solução', 'Respuesta': 'Resposta', 'Reacción': 'Reação', 'Acción': 'Ação', 'Medida': 'Medida', 'Procedimiento': 'Procedimento', 'Proceso': 'Processo', 'Método': 'Método', 'Técnica': 'Técnica' }; let translatedText = text; for (const [spanish, portuguese] of Object.entries(translations)) { const regex = new RegExp(`\\b${spanish}\\b`, 'gi'); translatedText = translatedText.replace(regex, portuguese); } return translatedText; }
function normalizeBrand(brand) { if (!brand || typeof brand !== 'string') return ''; return brand.charAt(0).toUpperCase() + brand.slice(1).toLowerCase(); }
function formatEAN(eanValue) { if (!eanValue) return ''; let eanStr = String(eanValue); if (eanStr.includes('E+') || eanStr.includes('e+')) { try { const num = parseFloat(eanStr.replace(',', '.')); eanStr = num.toFixed(0); } catch (error) { return eanValue; } } return eanStr.replace(/,/g, ''); }
function processExtraImages(extraImagesJson) { if (!extraImagesJson || typeof extraImagesJson !== 'string') { return []; } if (!extraImagesJson.trim().startsWith('{') && !extraImagesJson.trim().startsWith('[')) { return []; } try { const parsed = JSON.parse(extraImagesJson); if (parsed && typeof parsed === 'object' && parsed.details && Array.isArray(parsed.details)) { return parsed.details.filter(url => url && typeof url === 'string' && !url.includes('_thumb') && (url.startsWith('http'))); } if (Array.isArray(parsed)) { return parsed.filter(url => url && typeof url === 'string' && !url.includes('_thumb') && (url.startsWith('http'))); } } catch (error) { } return []; }
function transformProduct(visiProduct) { try { const name = visiProduct.name || ''; const brand = normalizeBrand(visiProduct.brand || ''); const title = visiProduct.short_description && visiProduct.short_description.trim() !== '' ? translateText(visiProduct.short_description) : translateText(name); const description = translateText(visiProduct.description || ''); const specifications = translateText(visiProduct.specifications || ''); let fullDescription = description; if (specifications && specifications.trim() !== '') { fullDescription += `\n\n<h3>Especificações Técnicas</h3>\n${specifications}`; } const basePrice = parseFloat(visiProduct.precio_venta_cliente_final) || 0; const priceWithVAT = basePrice > 0 ? (basePrice * 1.23).toFixed(2) : '1.00'; const comparePrice = parseFloat(visiProduct.PVP) || 0; const costPrice = parseFloat(visiProduct.precio_neto_compra) || 0; const stockLevel = visiProduct.stock || 'low'; const inventoryQty = stockLevel === 'high' ? 10 : stockLevel === 'medium' ? 5 : 1; const category = translateText(visiProduct.category || ''); const categoryParent = translateText(visiProduct.category_parent || ''); const tags = [brand, category, categoryParent].filter(tag => tag && tag.trim() !== '').join(', '); const published = visiProduct.published === '1' ? 'active' : 'draft'; const status = published; const mainImage = visiProduct.image_path || ''; const eanFormatted = formatEAN(visiProduct.ean); const handle = name.toLowerCase().replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, ''); const baseProduct = { 'Handle': handle, 'Title': title, 'Body (HTML)': fullDescription, 'Vendor': brand, 'Product Category': '', 'Type': category, 'Tags': tags, 'Published': 'TRUE', 'Option1 Name': '', 'Option1 Value': '', 'Option2 Name': '', 'Option2 Value': '', 'Option3 Name': '', 'Option3 Value': '', 'Variant SKU': visiProduct.name, 'Variant Grams': '', 'Variant Inventory Tracker': 'shopify', 'Variant Inventory Qty': inventoryQty, 'Variant Inventory Policy': 'deny', 'Variant Fulfillment Service': 'manual', 'Variant Price': priceWithVAT, 'Variant Compare At Price': comparePrice > 0 ? comparePrice.toFixed(2) : '', 'Variant Requires Shipping': 'TRUE', 'Variant Taxable': 'TRUE', 'Variant Barcode': eanFormatted, 'Image Src': mainImage, 'Image Position': '1', 'Image Alt Text': title, 'Gift Card': 'FALSE', 'SEO Title': `${title} | ${brand}`, 'SEO Description': translateText(visiProduct.short_description || ''), 'Google Shopping / Google Product Category': '', 'Google Shopping / Gender': '', 'Google Shopping / Age Group': '', 'Google Shopping / MPN': visiProduct.name, 'Google Shopping / Condition': 'new', 'Google Shopping / Custom Product': 'TRUE', 'Variant Image': '', 'Variant Weight Unit': 'g', 'Variant Tax Code': '', 'Cost per item': costPrice > 0 ? costPrice.toFixed(2) : '', 'Included / United States': 'TRUE', 'Price / United States': '', 'Compare At Price / United States': '', 'Included / International': 'TRUE', 'Price / International': '', 'Compare At Price / International': '', 'Status': status }; const products = [baseProduct]; const extraImages = processExtraImages(visiProduct.extra_images_paths); extraImages.forEach((imageUrl, index) => { const extraImageProduct = { 'Handle': handle, 'Title': '', 'Body (HTML)': '', 'Vendor': '', 'Product Category': '', 'Type': '', 'Tags': '', 'Published': '', 'Option1 Name': '', 'Option1 Value': '', 'Option2 Name': '', 'Option2 Value': '', 'Option3 Name': '', 'Option3 Value': '', 'Variant SKU': '', 'Variant Grams': '', 'Variant Inventory Tracker': '', 'Variant Inventory Qty': '', 'Variant Inventory Policy': '', 'Variant Fulfillment Service': '', 'Variant Price': '', 'Variant Compare At Price': '', 'Variant Requires Shipping': '', 'Variant Taxable': '', 'Variant Barcode': '', 'Image Src': imageUrl, 'Image Position': (index + 2).toString(), 'Image Alt Text': title, 'Gift Card': '', 'SEO Title': '', 'SEO Description': '', 'Google Shopping / Google Product Category': '', 'Google Shopping / Gender': '', 'Google Shopping / Age Group': '', 'Google Shopping / MPN': '', 'Google Shopping / Condition': '', 'Google Shopping / Custom Product': '', 'Variant Image': '', 'Variant Weight Unit': '', 'Variant Tax Code': '', 'Cost per item': '', 'Included / United States': '', 'Price / United States': '', 'Compare At Price / United States': '', 'Included / International': '', 'Price / International': '', 'Compare At Price / International': '', 'Status': '' }; products.push(extraImageProduct); }); return products; } catch (error) { console.error('Erro ao transformar produto:', visiProduct.name, error.message); return null; } }

// ESTA É A ÚNICA FUNÇÃO ALTERADA NESTE FICHEIRO
// Ela agora usa uma biblioteca profissional para ler o CSV e depois chama a sua função 'transformProduct'
function transformVisiCSVToShopify(inputPath, outputPath) {
    return new Promise((resolve, reject) => {
        const allShopifyProducts = [];
        const headers = ['name', 'image_path', 'stock', 'msrp', 'brand', 'description', 'specifications', 'content', 'short_description', 'short_description_html', 'category', 'category_parent', 'precio_neto_compra', 'precio_venta_cliente_final', 'PVP', 'ean', 'published', 'created', 'modified', 'params', 'related_products', 'extra_images_paths', 'category_id'];

        fs.createReadStream(inputPath)
            .on('error', (err) => reject(err))
            .pipe(csv({ separator: ';', headers: headers, skipLines: 1 }))
            .on('data', (row) => {
                const products = transformProduct(row);
                if (products) {
                    allShopifyProducts.push(...products);
                }
            })
            .on('end', () => {
                console.log(`✅ ${allShopifyProducts.length} linhas de produto (incluindo imagens) traduzidas com sucesso.`);
                // Agora, em vez de escrever um ficheiro, devolvemos os dados
                resolve({ shopifyLines: allShopifyProducts });
            });
    });
}

module.exports = { transformVisiCSVToShopify };
